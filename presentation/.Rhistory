colnames(mean_ret)
for (ret in tret_vector){
ef_w = findEfficientFrontier.Return(returns, ret)
tmp.Ret = calcPortPerformance(ef_w, mean_ret, cov_matrix)[[1]]
tmp.Risk = calcPortPerformance(ef_w, mean_ret, cov_matrix)[[2]]
ef_line[i,'Return'] = tmp.Ret
ef_line[i,'Risk'] = tmp.Risk
ef_line[i, Portfolio] =paste0(
for (n in 1:length(ef_w)){
paste0(colnames(df)[n],":",round(ef_w,2),"<br>")
}
)
i = i+1
}
for (ret in tret_vector){
ef_w = findEfficientFrontier.Return(returns, ret)
tmp.Ret = calcPortPerformance(ef_w, mean_ret, cov_matrix)[[1]]
tmp.Risk = calcPortPerformance(ef_w, mean_ret, cov_matrix)[[2]]
ef_line[i,'Return'] = tmp.Ret
ef_line[i,'Risk'] = tmp.Risk
ef_line[i, 'Portfolio'] =paste0(
for (n in 1:length(ef_w)){
paste0(colnames(df)[n],":",round(ef_w,2),"<br>")
}
)
i = i+1
}
paste0(colnames(df)[n],":",round(ef_w[n],2),"<br>")
for (ret in tret_vector){
ef_w = findEfficientFrontier.Return(returns, ret)
tmp.Ret = calcPortPerformance(ef_w, mean_ret, cov_matrix)[[1]]
tmp.Risk = calcPortPerformance(ef_w, mean_ret, cov_matrix)[[2]]
ef_line[i,'Return'] = tmp.Ret
ef_line[i,'Risk'] = tmp.Risk
ef_line[i, 'Portfolio'] =paste0(
for (n in 1:length(ef_w)){
paste0(colnames(df)[n],":",round(ef_w[n],2),"<br>")
}
)
i = i+1
}
ef_line[i, 'Portfolio'] = for (n in 1:length(ef_w)){
paste0(colnames(df)[n],":",round(ef_w[n],2),"<br>")
}
n=1
colnames(df)[n]
round(ef_w[n],2)
as.character(ef_w)
as.character(round(ef_w), 4)
as.character(round(ef_w, 4))
as.character(round(ef_w, 4)*100)
paste(c(colnames(df), as.character(round(ef_w, 4)*100)))
c(colnames(df)
)
paste(c(colnames(df)), as.character(round(ef_w, 4)*100), sep=': ')
paste(c(colnames(df)), as.character(round(ef_w, 4)*100), "%", sep=': ')
paste(c(colnames(df)),
paste(as.character(round(ef_w, 4)*100), "%"), sep=': ')
paste(c(colnames(df)),
paste(as.character(round(ef_w, 4)*100), "%"), sep=": ", collapse = "<br>")
for (ret in tret_vector){
ef_w = findEfficientFrontier.Return(returns, ret)
tmp.Ret = calcPortPerformance(ef_w, mean_ret, cov_matrix)[[1]]
tmp.Risk = calcPortPerformance(ef_w, mean_ret, cov_matrix)[[2]]
ef_line[i,'Return'] = tmp.Ret
ef_line[i,'Risk'] = tmp.Risk
ef_line[i, 'Portfolio'] = paste(c(colnames(df)),
paste(as.character(round(ef_w, 4)*100), "%"), sep=": ", collapse = "<br>")
i = i+1
}
g4 = ggplot(data=sim_port, aes(x=Risk, y=Return)) + geom_point(data=sim_port, aes(x=Risk, y=Return), color='gray', alpha=0.5) +
geom_line(data=ef_line, aes(x=Risk, y=Return, text = Portfolio), group=1), color='steelblue3', size =5, alpha=0.5) + theme_hc() + xlab('Risk (standard deviation of returns, annualized)') + ylab('Average Returns, annualized')
g4 = ggplot(data=sim_port, aes(x=Risk, y=Return)) + geom_point(data=sim_port, aes(x=Risk, y=Return), color='gray', alpha=0.5) +
geom_line(data=ef_line, aes(x=Risk, y=Return, text = Portfolio, group=1), color='steelblue3', size =5, alpha=0.5) + theme_hc() + xlab('Risk (standard deviation of returns, annualized)') + ylab('Average Returns, annualized')
g4 = ggplotly(g4, tooltip = "text")
g4
tret_vector = seq(min_tret, max_tret, length.out = 20)
ef_line = data.frame(Risk = rep(NA, length(tret_vector)), Return = rep(NA, length(tret_vector)),
Portfolio = rep(NA, length(tret_vector))) #Place holder
i =1 #counter
for (ret in tret_vector){
ef_w = findEfficientFrontier.Return(returns, ret)
tmp.Ret = calcPortPerformance(ef_w, mean_ret, cov_matrix)[[1]]
tmp.Risk = calcPortPerformance(ef_w, mean_ret, cov_matrix)[[2]]
ef_line[i,'Return'] = tmp.Ret
ef_line[i,'Risk'] = tmp.Risk
ef_line[i, 'Portfolio'] = paste(c(colnames(df)),
paste(as.character(round(ef_w, 4)*100), "%"), sep=": ", collapse = "<br>")
i = i+1
}
g4 = ggplot(data=sim_port, aes(x=Risk, y=Return)) + geom_point(data=sim_port, aes(x=Risk, y=Return), color='gray', alpha=0.5) +
geom_line(data=ef_line, aes(x=Risk, y=Return, text = Portfolio, group=1), color='steelblue3', size =5, alpha=0.5) + theme_hc() + xlab('Risk (standard deviation of returns, annualized)') + ylab('Average Returns, annualized')
g4 = ggplotly(g4, tooltip = "text")
g4
g4 = ggplot(data=sim_port, aes(x=Risk, y=Return)) + geom_point(data=sim_port, aes(x=Risk, y=Return), color='gray', alpha=0.5) +
geom_line(data=ef_line, aes(x=Risk, y=Return, text = Portfolio, group=1), color='steelblue3', size =5, alpha=0.5) +
ylim(0,1) + theme_hc() + xlab('Risk (standard deviation of returns, annualized)') + ylab('Average Returns, annualized')
g4 = ggplotly(g4, tooltip = "text")
g4
g4 = ggplot(data=sim_port, aes(x=Risk, y=Return)) + geom_point(data=sim_port, aes(x=Risk, y=Return), color='gray', alpha=0.5) +
geom_line(data=ef_line, aes(x=Risk, y=Return, text = Portfolio, group=1), color='steelblue3', size =5, alpha=0.5) +
ylim(0,0.15) + theme_hc() + xlab('Risk (standard deviation of returns, annualized)') + ylab('Average Returns, annualized')
g4 = ggplotly(g4, tooltip = "text")
g4
g4 = ggplot(data=sim_port, aes(x=Risk, y=Return)) + geom_point(data=sim_port, aes(x=Risk, y=Return), color='gray', alpha=0.5) +
geom_line(data=ef_line, aes(x=Risk, y=Return, text = Portfolio, group=1), color='steelblue3', size =5, alpha=0.5) +
ylim(0,0.12) + theme_hc() + xlab('Risk (standard deviation of returns, annualized)') + ylab('Average Returns, annualized')
g4 = ggplotly(g4, tooltip = "text")
g4
g4 = ggplot(data=sim_port, aes(x=Risk, y=Return)) + geom_point(data=sim_port, aes(x=Risk, y=Return), color='gray', alpha=0.5) +
geom_line(data=ef_line, aes(x=Risk, y=Return, text = Portfolio, group=1), color='steelblue3', size =5, alpha=0.5) +
ylim(0,0.10) + theme_hc() + xlab('Risk (standard deviation of returns, annualized)') + ylab('Average Returns, annualized')
g4 = ggplotly(g4, tooltip = "text")
g4
runif
?runif
rbinom
?rbinom
shiny::runApp('Documents/NYCDSA/Projects/AMShiny/AMShinyApp')
runApp('Documents/NYCDSA/Projects/AMShiny/AMShinyApp')
runApp('Documents/NYCDSA/Projects/AMShiny/AMShinyApp')
runApp('Documents/NYCDSA/Projects/AMShiny/AMShinyApp')
runApp('Documents/NYCDSA/Projects/AMShiny/AMShinyApp')
runApp('Documents/NYCDSA/Projects/AMShiny/AMShinyApp')
runApp('Documents/NYCDSA/Projects/AMShiny/AMShinyApp')
runApp('Documents/NYCDSA/Projects/AMShiny/AMShinyApp')
runApp('Documents/NYCDSA/Projects/AMShiny/AMShinyApp')
runApp('Documents/NYCDSA/Projects/AMShiny/AMShinyApp')
runApp('Documents/NYCDSA/Projects/AMShiny/AMShinyApp')
runApp('Documents/NYCDSA/Projects/AMShiny/AMShinyApp')
runApp('Documents/NYCDSA/Projects/AMShiny/AMShinyApp')
runApp('Documents/NYCDSA/Projects/AMShiny/AMShinyApp')
library(datasets)
data("chickwts")
runApp('Documents/NYCDSA/Projects/AMShiny/AMShinyApp')
runApp('Documents/NYCDSA/Projects/AMShiny/AMShinyApp')
rmarkdown::render()
rmarkdown::render()
rmarkdown::render(Theory.Rmd, output_format = 'html')
install.packages('xml2')
library(xml2)
file_path = '~/Documents/NYCDSA/Projects/AMShiny/Prepare/Theory.html'
xml2::write_html(rvest::html_node(xml2::read_html(file_path), "body"), file = file_path)
runApp('Documents/NYCDSA/Projects/AMShiny/AMShinyApp')
runApp('Documents/NYCDSA/Projects/AMShiny/AMShinyApp')
runApp('Documents/NYCDSA/Projects/AMShiny/AMShinyApp')
runApp('Documents/NYCDSA/Projects/AMShiny/AMShinyApp')
runApp('Documents/NYCDSA/Projects/AMShiny/AMShinyApp')
runApp('Documents/NYCDSA/Projects/AMShiny/AMShinyApp')
runApp('Documents/NYCDSA/Projects/AMShiny/AMShinyApp')
runApp('Documents/NYCDSA/Projects/AMShiny/AMShinyApp')
runApp('Documents/NYCDSA/Projects/AMShiny/AMShinyApp')
# Set cridentials for plotly
Sys.setenv("plotly_username"="mike@stukalo.com")
Sys.setenv("plotly_api_key"="STUKmi00")
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(tidyr)
library(ggplot2)
library(lubridate)
library(ggthemes)
library(plotly)
library(xts)
source('../Prepare/am_helper.R')
# Set cridentials for plotly
Sys.setenv("plotly_username"="mike@stukalo.com")
Sys.setenv("plotly_api_key"="STUKmi00")
# set strings as factors to false
options(stringsAsFactors = FALSE)
df = read.csv('./Data/returns.csv', row.names = 'date')
df = df[rownames(df)<"2018-10-01",]
# Convert to zoo
returns = xts(df, order.by = as.Date(rownames(df)))
# Calculate annualized mean returns, sd of returns and covariance
mean_ret = apply(returns, 2, mean) * 250
sd_ret = apply(returns, 2, sd) * sqrt(250)
cov_matrix = cov(returns) * 250
df1 = data.frame(Asset = colnames(df), Return = mean_ret, Risk = sd_ret)
g1 = ggplot(df1, aes(x=Risk, y=Return, label=Asset)) + geom_point(color="steelblue3")  + ggtitle('Risk/Return of Asset Classes\n(annualized)') + xlab('Risk (standard deviation of returns, annualized)') + ylab('Average Returns, annualized') + xlim(0, 0.4) +
ylim(0,0.15) + theme_hc()
g1 = ggplotly(g1, tooltip = c("x","y")) %>%   add_annotations(x = df1$Risk,
y = df1$Return,
text = df1$Asset,
xref = "x",
yref = "y",
showarrow = TRUE,
arrowhead = 4,
arrowsize = .5,
ax = 40,
ay = -15)
g1$x$data[[1]]$text = paste("Return:", round(df1$Return, 4) * 100, "%","<br>",
"Risk:", round(df1$Risk, 4) * 100, "%")
g1
api_create(g1, filename = "risk_return_assets")
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(tidyr)
library(ggplot2)
library(lubridate)
library(ggthemes)
library(plotly)
library(xts)
source('../Prepare/am_helper.R')
# Set cridentials for plotly
Sys.setenv("plotly_username"="mikestukalo")
Sys.setenv("plotly_api_key"="STUKmi00")
# set strings as factors to false
options(stringsAsFactors = FALSE)
df = read.csv('./Data/returns.csv', row.names = 'date')
df = df[rownames(df)<"2018-10-01",]
# Convert to zoo
returns = xts(df, order.by = as.Date(rownames(df)))
# Calculate annualized mean returns, sd of returns and covariance
mean_ret = apply(returns, 2, mean) * 250
sd_ret = apply(returns, 2, sd) * sqrt(250)
cov_matrix = cov(returns) * 250
api_create(g1, filename = "risk_return_assets")
Sys.setenv("plotly_username"="mikestukalo")
Sys.setenv("plotly_api_key"="5Lt9Tyj4SqGeycmmavBz")
api_create(g1, filename = "risk_return_assets")
``{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(tidyr)
library(ggplot2)
library(lubridate)
library(ggthemes)
library(plotly)
library(xts)
source('../Prepare/am_helper.R')
# set strings as factors to false
options(stringsAsFactors = FALSE)
df = read.csv('./Data/returns.csv', row.names = 'date')
df = df[rownames(df)<"2018-10-01",]
# Convert to zoo
returns = xts(df, order.by = as.Date(rownames(df)))
# Calculate annualized mean returns, sd of returns and covariance
mean_ret = apply(returns, 2, mean) * 250
sd_ret = apply(returns, 2, sd) * sqrt(250)
cov_matrix = cov(returns) * 250
df1 = data.frame(Asset = colnames(df), Return = mean_ret, Risk = sd_ret)
g1 = ggplot(df1, aes(x=Risk, y=Return, label=Asset)) + geom_point(color="steelblue3")  + ggtitle('Risk/Return of Asset Classes\n(annualized)') + xlab('Risk (standard deviation of returns, annualized)') + ylab('Average Returns, annualized') + xlim(0, 0.4) +
ylim(0,0.15) + theme_hc()
g1 = ggplotly(g1, tooltip = c("x","y")) %>%   add_annotations(x = df1$Risk,
y = df1$Return,
text = df1$Asset,
xref = "x",
yref = "y",
showarrow = TRUE,
arrowhead = 4,
arrowsize = .5,
ax = 40,
ay = -15)
g1$x$data[[1]]$text = paste("Return:", round(df1$Return, 4) * 100, "%","<br>",
"Risk:", round(df1$Risk, 4) * 100, "%")
api_create(g1, filename = "risk_return_assets")
shiny::runApp('Documents/NYCDSA/Projects/AMShiny/AMShinyApp')
library(shiny)
library(shinyWidgets)
library(shinydashboard)
?checkboxGroupInput
?checkboxGroupButtons
runApp('Documents/NYCDSA/Projects/AMShiny/AMShinyApp')
runApp('Documents/NYCDSA/Projects/AMShiny/AMShinyApp')
runApp('Documents/NYCDSA/Projects/AMShiny/AMShinyApp')
runApp('Documents/NYCDSA/Projects/AMShiny/AMShinyApp')
runApp('Documents/NYCDSA/Projects/AMShiny/AMShinyApp')
runApp('Documents/NYCDSA/Projects/AMShiny/AMShinyApp')
runApp('Documents/NYCDSA/Projects/AMShiny/AMShinyApp')
runApp('Documents/NYCDSA/Projects/AMShiny/AMShinyApp')
runApp('Documents/NYCDSA/Projects/AMShiny/AMShinyApp')
if (short == FALSE){
opt.weights = pmax(opt.weights, 0) #Correct approximation error
opt.weights = opt.weights/sum(opt.weights)
}
# By target risk
findEfficientFrontier.Risk = function(zoo, target_risk, short = FALSE){
#Calculate optimal weights
opt.weights = portfolio.optim(returns, ps=tarket_risk/sqrt(250), shorts = short)$pw
if (short == FALSE){
opt.weights = pmax(opt.weights, 0) #Correct approximation error
opt.weights = opt.weights/sum(opt.weights)
}
return (opt.weights)
}
#TMP
ggplot(data=sim_port, aes(x=Risk, y=Return)) + geom_point()
ef_w = findEfficientFrontier.Risk(returns, target_risk)
ef_ret = calcPortPerformance(ef_w, mean_ret, cov_matrix)[1]
ef_ret = calcPortPerformance(ef_w, mean_ret, cov_matrix)[1]
ef_risk = calcPortPerformance(ef_w, mean_ret, cov_matrix)[2]
ef_ret = calcPortPerformance(ef_w, mean_ret, cov_matrix)[[1]]
ef_risk = calcPortPerformance(ef_w, mean_ret, cov_matrix)[[2]]
target_risk = 0.1/sqrt(250)
# By target risk
findEfficientFrontier.Risk = function(zoo, target_risk, short = FALSE){
#Calculate optimal weights
opt.weights = portfolio.optim(returns, ps=tarket_risk, shorts = short)$pw
if (short == FALSE){
opt.weights = pmax(opt.weights, 0) #Correct approximation error
opt.weights = opt.weights/sum(opt.weights)
}
return (opt.weights)
}
#TMP
ggplot(data=sim_port, aes(x=Risk, y=Return)) + geom_point()
target_risk = 0.1/sqrt(250)
ef_w = findEfficientFrontier.Risk(returns, target_risk)
ef_ret = calcPortPerformance(ef_w, mean_ret, cov_matrix)[[1]]
ef_risk = calcPortPerformance(ef_w, mean_ret, cov_matrix)[[2]]
install.packages("ROML")
# By target risk
findEfficientFrontier.Risk = function(zoo, target_risk, short = FALSE){
#Calculate optimal weights
opt.weights = portfolio.optim(returns, ps=target_risk, shorts = short)$pw
if (short == FALSE){
opt.weights = pmax(opt.weights, 0) #Correct approximation error
opt.weights = opt.weights/sum(opt.weights)
}
return (opt.weights)
}
#TMP
ggplot(data=sim_port, aes(x=Risk, y=Return)) + geom_point()
target_risk = 0.1/sqrt(250)
ef_w = findEfficientFrontier.Risk(returns, target_risk)
ef_ret = calcPortPerformance(ef_w, mean_ret, cov_matrix)[[1]]
ef_risk = calcPortPerformance(ef_w, mean_ret, cov_matrix)[[2]]
names(df)
library(dplyr)
library(tibble)
from = as.Date("2018-01-01")
to = as.Date("2018-03-01")
df_range = df %>% rownames_to_column("date") %>%
filter(as.Date(date)>=from & as.Date(date) <= to) %>% column_to_rownames("date")
View(df_range)
wght = c(0.3,0.1,0.15,0.05,0.1,0.1)
sum(wght)
wght = c(0.3,0.1,0.15,0.05,0.18,0.22)
sum(wght)
#Create weight dataframe
wght_df = data.frame(date=row.names(df_range))
View(wght_df)
shiny::runApp('Documents/NYCDSA/Projects/AMShiny/AMShinyApp')
runApp('Documents/NYCDSA/Projects/AMShiny/AMShinyApp')
runApp('Documents/NYCDSA/Projects/AMShiny/AMShinyApp')
runApp('Documents/NYCDSA/Projects/AMShiny/AMShinyApp')
?fluidPage
runApp('Documents/NYCDSA/Projects/AMShiny/AMShinyApp')
runApp('Documents/NYCDSA/Projects/AMShiny/AMShinyApp')
?DEOptim
library(DEoptim)
?DEOptim
shiny::runApp('Documents/NYCDSA/Projects/AMShiny/AMShinyApp')
runApp('Documents/NYCDSA/Projects/AMShiny/AMShinyApp')
### Helper functions for portfolio valuation
###
### Mikhail Stukalo, 2018
###
library(tseries)
library(dplyr)
library(tibble)
library(PerformanceAnalytics)
library(DEoptim)
# Function that calculates portfolio return/risk given mean returns of assets and a covariance matrix
calcPortPerformance = function(weights, mean_ret, cov_matrix){
portRet =  t(weights) %*% mean_ret
portRisk =  sqrt(t(weights) %*% (cov_matrix %*% weights))
return (list(portRet, portRisk))
}
## Function that simulates portfolio risk/return given mean returns of assets and a covariance matrix
simPortfolios = function(mean_ret, cov_matrix, nsim=10000){
n_assets = length(mean_ret) #Get number of assets
#Create empty DataFrame
result = data.frame(Return = rep(NA,nsim), Risk = rep(NA, nsim))
#Simulate portfolios performance and populate the resulting dataframe
for (i in 1:nsim){
weights = runif(n_assets, 0, 1)  #Simulate normal distribution
weights = weights/sum(weights)      #Make sure that weights add up to 1.0
portRet = calcPortPerformance(weights, mean_ret, cov_matrix) [[1]]
portRisk = calcPortPerformance(weights, mean_ret, cov_matrix) [[2]]
result$Return[i] = portRet
result$Risk[i] = portRisk
}
return (result)
}
## Function that finds weights of assets on the efficient frontier
# By target return
findEfficientFrontier.Return = function(returns, target_ret, short = FALSE){
#Calculate optimal weights
opt.weights = portfolio.optim(returns, pm=target_ret/250, shorts = short)$pw
if (short == FALSE){
opt.weights = pmax(opt.weights, 0) #Correct approximation error
opt.weights = opt.weights/sum(opt.weights)
}
return (opt.weights)
}
#By target risk
findEfficientFrontier.Risk = function(mean_ret, cov_matrix, target_risk){
obj_func = function(w){
#To avoid NA
if (sum(w) ==0){
w = w + 1e-10}
#Balance to one
w = w/sum(w)
#Calculate negative return
neg_ret = - t(w) %*% mean_ret
p_risk = sqrt(t(w) %*% cov_matrix %*% w)
return(neg_ret + abs(p_risk - target_risk)) #Penalized optimization
}
# Set parameters
controlDE <- list(reltol=.000001,steptol=150, itermax = 10000,trace = 5000,
strategy=1, c=0)
#Long only
N = length(mean_ret)
lower = rep(0,N)
upper = rep(1,N)
out <- DEoptim(fn = obj_func, lower = lower, upper = upper, control = controlDE)
opt_w = out$optim$bestmem
opt_w = opt_w/sum(opt_w) #Sum up to 1
return(opt_w)
}
#Function that calculates portfolio returns
calcPortReturn = function(df, from, to, wght, rebalance){
#Cut dataframe to reflect date range
df_range = df %>% rownames_to_column("date") %>%
filter(as.Date(date)>=from & as.Date(date) <= to) %>% column_to_rownames("date")
df_range = xts(df_range, order.by = as.Date(row.names(df_range)))
indexClass(df_range) <- "Date"
#Create repalace operator
reb_op = ifelse(rebalance=="Never", NA,
ifelse(rebalance=="Annually", "years",
ifelse(rebalance=="Quarterly", "quarters",
"months")))
port_ret = Return.portfolio(df_range, weights = wght, geometric = T, rebalance_on = reb_op)
port_ret = data.frame(port_ret)
colnames(port_ret) = c("RetPort")
return (port_ret)
}
#Function that calculates portfolio performance measures
calcPortMeasures = function (port_ret, benchmark, rf){
mean_rf = mean(rf)
mean_port_ret = mean(port_ret)
sd_port_ret = sd(port_ret)
#Calculate Sharpe
sharpe = ((mean_port_ret - mean_rf) / sd_port_ret) * sqrt(250)
#Calculate Beta
mod = lm(formula = port_ret~benchmark)
beta = summary(mod)$coefficients[2,1]
#Calculate Sortino
sortino = SortinoRatio(port_ret) * sqrt(250)
#Calculate Taylor
treynor = ((mean_port_ret - mean_rf)*250)*100/beta
results = list("AvRet"=mean_port_ret * 250, "StDev" = sd_port_ret * sqrt(250),
"Sharpe" = sharpe, "Sortino" = sortino[1], "Beta" = beta, "Treynor" = treynor)
return (results)
}
runApp('Documents/NYCDSA/Projects/AMShiny/AMShinyApp')
runApp('Documents/NYCDSA/Projects/AMShiny/AMShinyApp')
runApp('Documents/NYCDSA/Projects/AMShiny/AMShinyApp')
from = as.Date("2015-01-01")
to = as.Date("2018-01-01")
df_tmp = df %>% rownames_to_column("date") %>%
filter(as.Date(date)>=from & as.Date(date) <= to) %>% column_to_rownames("date")
runApp('Documents/NYCDSA/Projects/AMShiny/AMShinyApp')
runApp('Documents/NYCDSA/Projects/AMShiny/AMShinyApp')
runApp('Documents/NYCDSA/Projects/AMShiny/AMShinyApp')
runApp('Documents/NYCDSA/Projects/AMShiny/AMShinyApp')
runApp('Documents/NYCDSA/Projects/AMShiny/AMShinyApp')
runApp('Documents/NYCDSA/Projects/AMShiny/AMShinyApp')
runApp('Documents/NYCDSA/Projects/AMShiny/AMShinyApp')
install.packages('rsconnect')
install.packages('rsconnect')
install.packages('rsconnect')
shiny::runApp('Documents/NYCDSA/Projects/AMShiny/AMShinyApp')
install.packages('rsconnect')
library(rsconnect)
rsconnect::setAccountInfo(name='mikestukalo',
token='37200B99AB3E0A453A4AA4ED4F450E65',
secret='6uERlHHHvUrCW2abtOBc8cehvQVq8xWaLJ+I8fon')
deployApp()
setwd('~/Documents/NYCDSA/Projects/Scrapy/presentation/')
shiny::runApp()
runApp()
library(memisc)
install.packages("memisc")
runApp()
runApp()
runApp()
runApp()
raw_table = read.csv("./data/raw.csv")
getwd()
raw_table = read.csv("./data/raw_sample.csv")
runApp()
runApp()
# Work flow
initial = data.frame(subreddit=c("/r/RobinHoodPennyStocks",
"/r/pennystocks",
"/r/stocks"),
comments = c(3991, 2256, 219))
View(initial)
# Work flow
clean = data.frame(subreddit=c("/r/RobinHoodPennyStocks",
"/r/pennystocks",
"/r/stocks"),
comments = c(,9477, 6390, 11056))
runApp()
runApp()
# Final dataset
final = read.csv("./data/df.csv")
View(final)
runApp()
runApp()
